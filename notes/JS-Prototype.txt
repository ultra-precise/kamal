Prototype (Definition) :

Prototypes are the mechanism by which JavaScript objects inherit features from one another. In this article, we explain how prototype chains work and look at how the prototype property can be used to add methods to existing constructors.

================================================
"JavaScript is a prototype-based language" ==>


JavaScript is often described as "a prototype-based language" — each object has "a prototype object", which acts as a template object that it inherits methods and properties from. An object's prototype object may also have a prototype object, which it inherits methods and properties from, and so on. This is often referred to as "a prototype chain", and explains why different objects have properties and methods defined on other objects available to them.

Well, to be exact, the properties and methods are defined on the prototype property on the Objects' constructor functions, not the object instances themselves.

In JavaScript, a link is made between the object instance and its prototype (its __proto__ property, which is derived from the prototype property on the constructor), and the properties and methods are found by walking up the chain of prototypes.


NOTE: 
It's important to understand that there is a distinction between an object's prototype (which is available via Object.getPrototypeOf(obj), or via the deprecated __proto__ property) and the prototype property on constructor functions. The former is the property on each instance, and the latter is the property on the constructor. That is, Object.getPrototypeOf(new Foobar()) refers to the same object as Foobar.prototype.





In this example, we have defined a Constructor Function, like so:



function Person(first, last, age, gender, interests) {
  
  // property and method definitions
  this.first = first;
  this.last = last;
//...
}


We have then created an Object Instance like this:


var person1 = new Person('Bob', 'Smith', 32, 'male', ['music', 'skiing']);



If you type "person1." into your JavaScript console, you should see the browser try to auto-complete this with the member names available on this object.


In this list, you will see the members defined on person1's prototype object, which is "Person()" (Person() is the constructor) — name, age, gender, interests, bio, and greeting. You will however also see some other members — watch, valueOf, etc — these are defined on the Person() 's prototype object, which is "Object". This demonstrates the prototype chain working. 


Prototype Chain -->

person1's prototype object = Person()
Person()'s prototype object = Object()



NOTE: 
We want to reiterate that the methods and properties are not copied from one object to another in the prototype chain — they are accessed by walking up the chain as described above.


NOTE: 
There isn't officially a way to access an object's prototype object directly — the "links" between the items in the chain are defined in an internal property, referred to as [[prototype]] in the specification for the JavaScript language (see ECMAScript). Most modern browsers however do have a property available on them called __proto__ (that's 2 underscores either side), which contains the object's constructor's prototype object. For example, try person1.__proto__ and person1.__proto__.__proto__ to see what the chain looks like in code!
Since ECMAScript 2015 you can access an object's prototype object indirectly via Object.getPrototypeOf(obj)

======================================================================
The Prototype property: Where inherited members(properties/methods) are defined ==>

So, where are the inherited properties and methods defined? If you look at the "Object" reference page, you'll see listed in the left hand side a large number of properties and methods — many more than the number of inherited members we saw available on the person1 object, some properties/methods of "Object" are inherited by person1, and some aren't — why is this? 

The answer is that the inherited ones are defined on the prototype property of "Object" — the ones that begin with "Object.prototype." and not the ones that begin with just "Object." 

The prototype property's value is an object, which is basically a bucket for storing properties and methods that we want to be inherited by other objects further down the prototype chain.

So Object.prototype.watch(), Object.prototype.valueOf(), etc., are available to any object types that inherit from Object.prototype, including new object instances created from the constructor.

Object.is(), Object.keys(), and other members not defined inside the prototype bucket are not inherited by object instances or object types that inherit from Object.prototype , They are methods/properties available just on the Object() constructor itself.

NOTE: 
This seems strange — how can you have a method defined on a constructor, which is itself a function? Well, a function is also a type of object — see the Function() constructor reference if you don't believe us.


You'll see other examples of prototype chain inheritance all over JavaScript — try looking for the methods and properties defined on the prototype of the String, Date, Number, and Array global objects, for example. These all have a number of members(properties/methods) defined on their prototype. This is the reason , when you create a string, like this:

var myString = 'This is my string.';

myString immediately has a number of useful methods available on it, like split(), indexOf(), replace(), etc.

====================================================================
"Constructor property" ==>



Every constructor function has "a prototype property" whose value is an object containing "a constructor property". This constructor property points to the original constructor function. As you will see in the next section that properties defined on the Person.prototype property (or defined on a constructor function's prototype property) become available to all the objects instances created using the Person() constructor. Hence, the "constructor property" is also available to both person1 and person2 objects.

For example, try these commands in the console:

person1.constructor
person2.constructor

These should both return the Person() constructor, as Person() contains the original definition of these instances.


IMPORTANT:
A clever trick is that you can put parentheses onto the end of the constructor property (containing any required parameters) to create another object instance from that constructor. The constructor is a function after all, so it can be invoked using parentheses; you just need to include the "new" keyword to specify that you want to use the function as a constructor.

Try this in the console:
var person3 = new person1.constructor('Karen', 'Stephenson', 26, 'female', ['playing drums', 'mountain climbing']);

Now try accessing your new object's features, for example:

person3.name.first
person3.age
person3.bio()

This works well. You won't need to use it often, but it can be really useful when you want to create a new instance and don't have a reference to the original constructor easily available for some reason.

The constructor property has other uses. For example, if you have an object instance and you want to return the name of the constructor it is an instance of, you can use the following:

instanceName.constructor.name

For example:

person1.constructor.name


Note: The value of "constructor.name" can change (due to prototypical inheritance, binding, preprocessors, transpilers, etc.), so for more complex examples you'll want to use the "instanceof" operator instead.

========================================================================
Modifying prototype , Adding new methods(functions) to prototype ==>

After modifying the prototype property of a constructor function, new methods added to the prototype are then available on all object instances created from that constructor. 

The following code adds a new method to the constructor's prototype property:


Person.prototype.farewell = function() {
  alert(this.name.first + ' has left the building. Bye for now!');
};


Save the code and load the page in the browser, and try entering the following into the JS console:

person1.farewell();

You should get an alert message displayed, featuring the person's name as defined inside the constructor. This is really useful, but what is even more useful is that the whole inheritance chain has updated dynamically, automatically making this new method available on all object instances derived from the constructor.

--------------

Example:

function Person(first, last, age, gender, interests) {

  // property and method definitions

}

var person1 = new Person('Tammi', 'Smith', 32, 'neutral', ['music', 'skiing', 'kickboxing']);

Person.prototype.farewell = function() {
  alert(this.name.first + ' has left the building. Bye for now!');
};

---------------
NOTE:
You will rarely see "properties" of object instance defined on the "prototype property" of constructor, because "properties" are not very flexible when defined like this.


However, defining "properties" on prototype property doesn't work at all, as "this" keyword will be referencing the global scope, not the function scope. Calling the properties would return "undefined undefined". 

It works fine on "methods" we define on the prototype property because "this" keyword is sitting inside a function scope, which will be transferred successfully to the object instance scope. 

So you can define only constant properties on the prototype property (ones that never need to change), but generally it works better to define properties inside the constructor function.

In fact, a fairly common pattern is to define the "properties" inside the constructor function, and define the "methods" on the prototype property. This makes the code easier to read, as the constructor function only contains the properties definitions, and the methods are split off into separate blocks. 
For example:




// Constructor with property definitions

function Test(a, b, c, d) {
  // property definitions
}

// First method definition

Test.prototype.x = function() { ... };

// Second method definition

Test.prototype.y = function() { ... };

// etc.


---------------
NOTE:
"prototype property" is used to add methods to constructors.


======================The End======================================

