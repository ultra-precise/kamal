Loosely Typed Language / Dynamic Language :

JavaScript is a loosely typed or a dynamic language. Variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned (and re-assigned) values of all types.

JavaScript is a loosely typed language. This means that you can use the same variable for different types of information, but you may also have to check what type a variable is yourself, if the differences matter. For example, if you wanted to add two numbers, but one variable turned out to be a string, the result wouldn't necessarily be what you expected.


You just have to make sure your data is in the right format; JavaScript makes it easier than many other languages, being weakly typed — for example numbers will convert to strings automatically when you want to print them to the screen.



=======================================================
Manipulating styles ->



para.style.backgroundColor
para.setAttribute('class', 'highlight');

--------------------------------------------------
1. inline styles:
para.style.backgroundColor = 'black';

Note: Notice how the JavaScript property versions of the CSS styles are written in lower camel case whereas the CSS versions are hyphenated (e.g. backgroundColor versus background-color). Make sure you don't get these mixed up, otherwise it won't work.


---------------------
2. a very useful method for general HTML manipulation
para.setAttribute('class', 'highlight');

This takes two arguments, the attribute you want to set on the element, and the value you want to set it to. In this case we will set a class name of highlight on our paragraph.

---------------------
The first method takes less setup and is good for simple uses, whereas the second method is more purist (no mixing CSS and JavaScript, no inline styles, which are seen as a bad practice). As you start building larger and more involved apps, you will probably start using the second method more, but it is really up to you.


Summary:

There is no point using JavaScript to create static content — you might as well just write it into your HTML and not use JavaScript. It is more complex than HTML, and creating your content with JavaScript also has other issues attached to it (such as not being readable by search engines).


=====================================================
"window" object ->

window.innerWidth
window.innerHeight
window.onresize


------------------------
var div = document.querySelector('div');
var WIDTH = window.innerWidth;
var HEIGHT = window.innerHeight;
div.style.width = WIDTH + 'px';
div.style.height = HEIGHT + 'px';
window.onresize = function() {
  WIDTH = window.innerWidth;
  HEIGHT = window.innerHeight;
  div.style.width = WIDTH + 'px';
  div.style.height = HEIGHT + 'px';
}


=======================================
USEFUL document.properties -->

Document.documentURI
(Returns the document location as a string)

Document.URL
(Returns the document location as a string)


document.documentElement
(returns code of <html> tag)

document.body
(returns code of <body> tag)

document.head


document.title

document.selectedStylesheetSet
(Returns which style sheet set is currently in use.)

document.scripts
Returns all the <script> elements on the document.

Document.scrollingElement
(Returns a reference to the Element that scrolls the document)

Document.anchors
(Returns a list of all of the anchors in the document)

Document.links
(Returns a list of all the hyperlinks in the document)

Document.images
(Returns a list of the images in the current document)

Document.forms
(Returns a list of the <form> elements within the current document)

Document.cookie
(Returns a semicolon-separated list of the cookies for that document or sets a single cookie)


Document.dir
(Gets/sets directionality (rtl/ltr) of the document.)


Document.readyState
(Returns loading status of the document)


Document.referrer
(Returns the URI of the page that linked to this page)


document.write('String text')
(Writes text in a document)


document.writeln('String text')
(Writes a line of text in a document)


ParentNode.childElementCount
(Returns the number of children of this ParentNode which are elements)

ParentNode.children
(Returns a live HTMLCollection containing all of the Element objects that are children of this ParentNode, omitting all of its non-element nodes)



