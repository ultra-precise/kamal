#### WINDOW PROPERTIES :

Window.closed
This property indicates whether the current window is closed or not.
return values = "true", "false"


Window.console
Returns a reference to the console object which provides access to the browser's debugging console.


Window.document
Returns a reference to the document that the window contains.


Window.history
Returns a reference to the history object.


Window.innerHeight
Gets the height of the content area of the browser window including, if rendered, the horizontal scrollbar.


Window.innerWidth
Gets the width of the content area of the browser window including, if rendered, the vertical scrollbar.


Window.length
Returns the number of frames in the window. See also window.frames.


Window.location
Gets/sets the location, or current URL, of the window object.


Window.screen
Returns a reference to the screen object associated with the window.


Window.self
Returns an object reference to the window object itself.


Window.sessionStorage
Returns a reference to the session storage object used to store data that may only be accessed by the origin that created it.

Window.status
Gets/sets the text in the statusbar at the bottom of the browser.



Window.statusbar
Returns the statusbar object, whose visibility can be toggled in the window.


Window.window
Returns a reference to the current window.


------------------------------------
------------------
#### WINDOW EVENT HANDLERS :


window.onabort
Called when the loading of a resource has been aborted, such as by a user canceling the load while it is still in progress



window.onbeforeunload
An event handler property for before-unload events on the window.


window.onblur
Called after the window loses focus, such as due to a popup.


window.onchange
An event handler property for change events on the window.


window.onclick
Called after the ANY mouse button is pressed & released


window.ondblclick
Called when a double click is made with ANY mouse button.


window.onclose
Called after the window is closed


window.oncontextmenu
Called when the RIGHT mouse button is pressed


window.onerror
Called when a resource fails to load OR when an error occurs at runtime.


window.onfocus
Called after the window receives or regains focus.


window.onhashchange
An event handler property for hashchange events on the window; called when the part of the URL after the hash mark ("#") changes.


window.oninput
Called when the value of an <input> element changes




+++++++++++++++++++++++++++++++++++++++++++++++++++++
#### WINDOW METHODS :

Window.alert()
Displays an alert dialog.


window.history.back()
Moves back one-website in the window history.


window.history.forward()
Moves the window one document forward in the history.



Window.blur()
Sets focus away from the window.


Window.close()
Closes the current window.


Window.confirm("Do you want to proceed with this website?")
Displays a dialog with a message that the user needs to respond to.
return values = "true", "false"
Example:
var a = window.confirm("do you want to proceed?");
if (a) {alert("OK TRUE");} else {alert("CANCEL FALSE");}


Window.find()
Searches for a given string in a window.


Window.focus()
Sets focus on the current window.


Window.getComputedStyle()
Gets computed style for the specified element. Computed style indicates the computed values of all CSS properties of the element.


Window.getSelection()
Returns the selection object (selected text of document) representing the selected item(s).



Window.setImmediate()
Executes a function after the browser has finished other heavy tasks


Window.stop()
This method stops window loading.


window.btoa()
Creates a base-64 encoded ASCII string from a string of binary data.



window.atob()
Decodes a string of data which has been encoded using base-64 encoding




==================
Window.postMessage()
Provides a secure means for one window to send a string of data to another window, which need not be within the same domain as the first.


-------------
window-1, (https://www.google.com) code:


function receiveMessage(event) {

// Do we trust the sender of this message?

    if (event.origin !== "https://www.bing.com")
    return;
  
  // event.source is popup window (window-2)
  // event.data is "Japan"

console.log(event.data);

}

window.addEventListener("message", receiveMessage, false);

var popup = window.open("https://www.bing.com");
popup.postMessage("Russia", "https://www.bing.com");


---------------
window-2 (popup window), (https://www.google.com) code:


function receiveMessage(event)
{

// Do we trust the sender of this message?

  if (event.origin !== "https://www.google.com")
  return;

  // event.source is window.opener (window-1)
  // event.data is "Russia"
  // Assuming you've verified the origin of the received message (which
  // you must do in any case), a convenient idiom for replying to a
  // message is to call postMessage on event.source and provide
  // event.origin as the targetOrigin.

  event.source.postMessage("Japan", event.origin);

console.log(event.data);

}

window.addEventListener("message", receiveMessage, false);

//OR you can use this:

window.opener.postMessage("Japan", "https://www.google.com");
