
window :
=================================
Properties :


fullScreen => if (window.fullScreen) { // it's fullscreen!} else { // not fullscreen!}


performance => Returns a Performance object, which includes timing and navigation attributes, each of which is an object providing performance-related data


name => Gets/sets name of window (used in window.postMessage)
frames => Returns an array of subframes in current window
length => count of frames in window
frameElement => Returns an element in which the window is embedded, or null if the window is not embedded
opener => reference to window that opened this current window
parent => reference to parent of current window or subframe
top => reference to topmost window in window-hierarchy


location => Gets/sets URL of current window object, location.properties : href, origin, host, hostname, pathname, protocol, port, reload()
navigator => reference to navigator object (Read Only)
closed => indicates whether current window is closed or not. return values = "true", "false"
console => reference to console object which provides access to browser's debugging console
document => reference to document that the window contains
history => reference to history object


innerHeight => Gets height of content area of browser window including horizontal scrollbar (Read Only)
innerWidth => Gets width of content area of browser window including vertical scrollbar (Read Only)
outerHeight => Gets height of outside of browser window (Read Only)
outerWidth => Gets width of outside of browser window (Read Only)
pageXOffset => alias for window.scrollX
pageYOffset => alias for window.scrollY
screen => reference to screen object
screenX and screenLeft => (Read only) Both return horizontal distance from left border of browser viewport to left side of screen
screenY and screenTop => (Read only) Both return vertical distance from top border of browser viewport to top side of screen
scrollbars => (Read only) Returns scrollbars object, whose visibility can be toggled in window (window.open)
scrollX => Returns number of pixels that document has already been scrolled horizontally
scrollY => Returns number of pixels that document has already been scrolled vertically
visualViewport => Returns a VisualViewport object which represents visual viewport for window


sessionStorage => Returns a reference to session storage object used to store data that may only be accessed by origin that created it
localStorage => Returns a reference to local storage object used to store data that may only be accessed by origin that created it


status => Gets/sets text in statusbar at the bottom of browser
statusbar => Returns statusbar object, whose visibility can be toggled in window


self => Returns a reference to current window itself
window => Returns a reference to current window
window[0], window[1], etc. => Returns reference to window object in frames. See Window.frames for more details.


caches (worker) => is used in Service Workers. Returns the CacheStorage object associated with the current context. This object enables functionality such as storing assets for offline use, and generating custom responses to requests.


indexedDB (worker) => Provides a mechanism for applications to asynchronously access capabilities of indexed databases; returns an IDBFactory object.


isSecureContext (worker) => Returns a boolean indicating whether the current context is secure (true) or not (false).


origin (worker) => Returns the global object's origin, serialized as a string.


------------------------------------
------------------
Event handlers :


device handlers:

onappinstalled
ondevicelight
ondevicemotion
ondeviceorientation
ondeviceproximity
ongamepadconnected
onvrdisplayconnect
onuserproximity


onrejectionhandled => for handled Promise rejection events
onunhandledrejection => for unhandled Promise rejection events
onabort => when loading of resource aborted
onafterprint
onfocus
onblur
onchange
onclick
ondblclick
onclose => Called after the window is closed
oncontextmenu => Called when RIGHT mouse button is pressed
onerror
onhashchange => called when part of URL after hash mark ("#") changes.
oninput => Called when value of <input> element changes


onkeydown
onkeypress
onkeyup
onmousedown
onmousemove
onmouseout
onmouseover
onmouseup

onlanguagechange


onload => it WILL NOT get called when page is loaded from cache, such as with back button
onunload => when user navigates away from page
onbeforeunload
onmessage => related to window.postMessage() method
onoffline => when network connection is lost
ononline => when network connection is established
onpagehide => when the user navigates away from the page
onpageshow => after all resources and DOM are fully loaded
onpopstate => when a back button is pressed
onreset => form
onsubmit => form
onresize => Called continuously as you are resizing window
onscroll => when scroll bar is moved via ANY means. If resource fully fits in window, then this event cannot be invoked.
onwheel => when mouse wheel is rotated around any axis
onselect => after text in input field is selected
onselectionchange => when selectionchange event raised
onstorage => when session storage or local storage changes


--------------------------------------
-----------------------
Constructors :


DOMParser => DOMParser can parse XML or HTML source stored in a string into a DOM Document. DOMParser is specified in DOM Parsing and Serialization.


Image => Used for creating an HTMLImageElement.


Option => Used for creating an HTMLOptionElement


Worker => Used for creating a Web worker


XMLSerializer


--------------------------------------
----------------------
Methods :


stop() => stops window loading, stops further resources loading, equivalent to "stop button" in browser
open() => Opens a new window
close() => Closes current window
print() => print current document
alert() => Displays alert dialog
history.back() => Moves back one-website in window history
history.forward() => Moves forward one-website in window history


prompt() => Returns user-input-text entered by user in a prompt dialog. Example:
var dob = window.prompt("Enter your date-of-birth here: ", "dd-mm-yyyy");
console.log(dob);


confirm() => Returns "true/false" for "OK/Cancel". Asks to user for "OK/Cancel" in a confirm dialog. Example:
var proceed = window.confirm("Do you want to proceed?");
if (proceed) {console.log("OK TRUE");} else {console.log("CANCEL FALSE");}


dispatchEvent() => trigger an event
dump() => Writes message to console
find() => Searches for a string in window
focus() => Sets focus on window
blur() => Sets focus away from window


getSelection() => Returns selection object (selected text of document) representing selected item(s)
matchMedia() => Returns a MediaQueryList object representing specified CSS-media-query string


requestAnimationFrame() => Tells browser that an animation is in progress, requesting that browser schedule a repaint of window for the next animation frame.


requestIdleCallback() => Enables scheduling of tasks during a browser's idle periods.


resizeBy() => Resizes current window
resizeTo() => Dynamically resizes window
scroll() => scrolls to an absolute position in document
scrollTo() => scrolls to a particular set of coordinates in document
scrollBy() => scrolls by a particular amount


addEventListener() => Register an event handler to a specific event type on window
removeEventListener() => Removes event listener of addEventListener()
setInterval() => Schedules a function to execute "repeatedly" every time a given number of milliseconds elapses.
setTimeout() => Schedules a function to execute "only once" after a given amount of time expires.
clearInterval() => Cancels repeated execution of setInterval() function
clearTimeout() => Cancels delayed execution of setTimeout() function


createImageBitmap() => Accepts a variety of different image sources, and returns a Promise which resolves to an ImageBitmap. Optionally the source is cropped to the rectangle of pixels originating at (sx, sy) with width sw, and height sh.


fetch() => Starts the process of fetching a resource from network
atob() => Decodes a string of data which has been encoded using base-64 encoding.
btoa() => Creates a base-64 encoded ASCII string from a string of binary data.


-----------------
getComputedStyle() => Gets computed style of specified element, Computed style indicates computed values of all CSS properties of the element.

<script>
var a = window.getComputedStyle(document.body);
    
    function sp(){
    
var ht = document.querySelector("body");
var propertiesList = document.createElement("ul");
var c = [];
for (let b in a) {
c.push(b);
}
c.sort().forEach(function(d){
var singleProperty = document.createElement("li");
var spanz = document.createElement("span");
spanz.setAttribute('style', 'color:SALMON;');
spanz.textContent = a[d];
var tn = document.createTextNode(" = " + a[a[d]]);
singleProperty.appendChild(spanz);
singleProperty.appendChild(tn);
propertiesList.appendChild(singleProperty);
});
ht.insertBefore(propertiesList, ht.firstChild);
    }
  
sp();
  
</script>
----------------


+++++++++++++++++++++++++++++
window.postMessage() => Provides a secure means for one window to send a string of data to another window, which need not be within the same domain as the first.


-------------
window-1, (https://www.google.com) code:


function receiveMessage(event) {

// Do we trust the sender of this message?

    if (event.origin !== "https://www.bing.com")
    return;
  
  // event.source is popup window (window-2)
  // event.data is "Japan"

console.log(event.data);

}

window.addEventListener("message", receiveMessage, false);

var popup = window.open("https://www.bing.com");
popup.postMessage("Russia", "https://www.bing.com");


---------------
window-2 (popup window), (https://www.bing.com) code:


function receiveMessage(event)
{

// Do we trust the sender of this message?

  if (event.origin !== "https://www.google.com")
  return;

  // event.source is window.opener (window-1)
  // event.data is "Russia"
  // Assuming you've verified the origin of the received message (which
  // you must do in any case), a convenient idiom for replying to a
  // message is to call postMessage on event.source and provide
  // event.origin as the targetOrigin.

  event.source.postMessage("Japan", event.origin);

console.log(event.data);

}

window.addEventListener("message", receiveMessage, false);

//OR you can use this:

window.opener.postMessage("Japan", "https://www.google.com");
