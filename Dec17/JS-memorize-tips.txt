Closure :

If a function returns another function, then it creates a Closure.

Example :

function makeSizer(size) {
  return function() {
    document.body.style.fontSize = size + 'px';
  };
}

var size12 = makeSizer(12);
var size14 = makeSizer(14);
var size16 = makeSizer(16);
----------------
Emulating private methods with closures :

(function(abc){
//code
})();

By using this format you can create private functions and variables, this is also called a Closure.

----------------
A common mistake - defining a function (closure) inside "for loop" :

var funcs = [];

for (var i = 0; i < 3; i++) {      // let's create 3 functions
  funcs[i] = function() {          // and store them in funcs
    console.log("My value: " + i); // each should log its value.
  };
}

for (var j = 0; j < 3; j++) {
  funcs[j]();                      // and now let's run each one to see
}

OUTPUT:
My value: 3
My value: 3
My value: 3

Whereas I'd like it to output:
My value: 0
My value: 1
My value: 2

..........................
Solution-1 :
Calling the function inside "for loop" and defining the function outside of "for loop" :

var funcs = [];

function createfunc(i) {
    return function() { console.log("My value: " + i); };
}

for (var i = 0; i < 3; i++) {
    funcs[i] = createfunc(i);
}

for (var j = 0; j < 3; j++) {
    funcs[j]();                        // and now let's run each one to see
}

..................
Solution-2 :
use "let" keyword instead of "var" for defining variables/methods.

..................
Solution-3 :
use forEach() 

==============================
Arrow function :

Always use arrow functions, except the following condition :
use normal-function for defining methods of any Object/Constructor.

==============================
















