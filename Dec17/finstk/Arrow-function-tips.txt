TIP-1 :

Always wrap the object literal in parentheses() :


var chewToys = puppies.map(puppy => {});   // BUG!
var chewToys = puppies.map(puppy => ({})); // ok




++++++++++++++++++
TIP-2 :

If Function does not return anything then use braces {} after arrow =>
Arrow functions can contain a block {} of statements instead of just an expression.


// ES5
$("#confetti-btn").click(function (event) {
  playTrumpet();
  fireConfettiCannon();
});



// ES6
$("#confetti-btn").click(event => {
  playTrumpet();
  fireConfettiCannon();
});




++++++++++++++++++++++++++
Tip-3 :

Function with multiple arguments :


// ES5
var total = values.reduce(function (a, b) {
  return a + b;
}, 0);



// ES6
var total = values.reduce((a, b) => a + b, 0);





+++++++++++++++++++++++++++++++
Tip-4 :

Function with single one argument :

// ES5
var selected = allJobs.filter(function (job) {
  return job.isSelected();
});



// ES6
var selected = allJobs.filter(job => job.isSelected());




++++++++++++++++++++++++++
Tip-5 :

Note that an arrow function with a block body {} does not automatically return a value. 
Use a return statement for that.

// ES6
var total = values.reduce((a, b) => a + b);
var total = values.reduce((a, b) => {return a + b;});





++++++++++++++++++++++++++++++++++++++
Tip-6 :

"this" keyword in object's method :


Have you ever written this hack?

{
  ...
  addAll: function addAll(pieces) {
    var self = this;
    _.each(pieces, function (piece) {
      self.add(piece);
    });
  },
  ...
}

-------------------
Here, what you’d like to write in the inner function is just this.add(piece). Unfortunately, the inner function doesn’t inherit the outer function’s this value. Inside the inner function, this will be window or undefined. The temporary variable self serves to smuggle the outer value of this into the inner function. (Another way is to use .bind(this) on the inner function. Neither way is particularly pretty.)

In ES6, this hacks mostly go away if you follow these rules:

-----------
In ES6, follow these rules:

1. Use non-arrow functions for methods that will be called using the object.method() syntax. Those are the functions that will receive a meaningful "this" value from their caller.
2. Use arrow functions for everything else.

------------
// ES6
{
  ...
  addAll: function addAll(pieces) {
    _.each(pieces, piece => this.add(piece));
  },
  ...
}


In the ES6 version, note that the addAll method receives this from its caller. The inner function is an arrow function, so it inherits this from the enclosing scope.

As a bonus, ES6 also provides a shorter way to write methods in object literals! So the code above can be simplified further:


// ES6 with method syntax
{
  ...
  addAll(pieces) {
    _.each(pieces, piece => this.add(piece));
  },
  ...
}


Between methods and arrows, I might never type functoin again. It’s a nice thought.

There’s one more minor difference between arrow and non-arrow functions: arrow functions don’t get their own arguments object, either. Of course, in ES6, you’d probably rather use a rest parameter or default value anyway.


-----------------------
=======================
